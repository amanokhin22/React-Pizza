import React, {useEffect, useRef} from "react";
import {useDispatch, useSelector} from "react-redux";
import {setCategoryId, setCurrentPage, setFilters} from "../redux/filter/filterSlice";
import qs from 'qs';
import {useNavigate} from "react-router-dom";

import Categories from "../components/Categories";
import Sort, {sortList} from "../components/Sort";
import Skeleton from "../components/pizza-block/Skeleton";
import PizzaBlock from "../components/pizza-block/PizzaBlock";
import Pagination from "../components/pagination/pagination";
import {fetchPizzas} from "../redux/pizzas/pizzaSlice";
import {selectPizza} from "../redux/pizzas/selectors";



const Home = () => {
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const isSearch = useRef(false);
    const isMounted = useRef(false);

    const {items, status} = useSelector(selectPizza);
    const {categoryId, sort, currentPage, searchValue} = useSelector((state) => state.filterSlice);


    const onChangeCategory = (id) => {
        dispatch(setCategoryId(id))
    };

    const onChangePage = number => {
        dispatch(setCurrentPage(number))
    };

    const getPizzas = async () => {

        const sortBy = sort.sortProperty.replace('-', '');
        const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
        const category = categoryId > 0 ? `category=${categoryId}` : '';
        const search = searchValue ? `&search=${searchValue}` : '';

           dispatch(
               fetchPizzas({
               sortBy, category, order, search, currentPage
           }));

        window.scrollTo(0, 0);
    };
//–ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ - –Ω–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ—Å—å –£–†–õ,
// –∞ –∫–æ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä –ø—Ä–æ—à–µ–ª - —Ä–∏—Å—É–µ–º –£–†–õ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–Ω—ã–π,
// –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å
    //–ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    useEffect(() => {
        if (isMounted.current) {
            const queryString = qs.stringify({
                sortProperty: sort.sortProperty,
                categoryId,
                currentPage
            });
            navigate(`?${queryString}`);
        }
        isMounted.current = true;
    }, [categoryId, sort.sortProperty, currentPage]);
//–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º  URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥—É–∫—Å–µ
    useEffect(() => {
        if (window.location.search) {
            const params = qs.parse(window.location.search.substring(1));
            const sort = sortList.find(obj => obj.sortProperty === params.sortProperty);
            dispatch(
                setFilters({
                    ...params,
                    sort
                })
            );
            isSearch.current = true;
        }
    }, [])
//–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
    useEffect(() => {
        if (!window.location.search) {
            fetchPizzas();
        }
        isSearch.current = false;

    }, [categoryId, sort.sortProperty, searchValue, currentPage]);

    useEffect(() => {
            getPizzas();
    }, []);


    const pizzas = items.map((obj) => <PizzaBlock key={obj.id} {...obj} />);

    const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index}/>);

    return (
        <div className="container">
            <div className="content__top">
                <Categories value={categoryId} onChangeCategory={onChangeCategory}/>
                <Sort/>
            </div>
            <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
            {status === 'error' ? (
                <div className="content__error-info">
                    <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
                    <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã.
                        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</p>
                </div>
            ) : (
                <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
            )}
            <Pagination currentPage={currentPage} onChangePage={onChangePage}/>
        </div>
    )
}

export default Home


//—Å–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ fetch
// fetch(
//     `https://6322e53da624bced308118bc.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`)
//     .then((res) => res.json())
//     .then((arr) => {
//         setItems(arr);
//         setIsLoading(false)
//     });


//–¢–∞–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ–±–æ–ª—å—à–æ–≥–æ, —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —Ç–æ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–∞ –±–∞–∑–µ JS –±–µ–∑ BE
// const pizzas = items.filter(obj => {
//     if (obj.title.toLowerCase().includes(searchValue.toLowerCase())) {
//         return true;
//     }
//     return false
// }).map((obj) => <PizzaBlock key={obj.id} {...obj} />);