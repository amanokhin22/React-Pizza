import React, {useCallback, useEffect, useRef} from "react";
import {useSelector} from "react-redux";
import {useNavigate} from "react-router-dom";

import Categories from "../components/Categories";
import {Sort} from "../components/Sort";
import Skeleton from "../components/pizza-block/Skeleton";
import {PizzaBlock} from "../components/pizza-block/PizzaBlock";
import {Pagination} from "../components/pagination/pagination";

import {useAppDispatch} from "../redux/store";
import {setCategoryId, setCurrentPage} from "../redux/filter/filterSlice";
import {fetchPizzas} from "../redux/pizzas/asyncActions";
import {selectPizzaData} from "../redux/pizzas/selectors";
import {selectFilter} from "../redux/filter/selectors";


const Home: React.FC = () => {
    //const navigate = useNavigate();
    const dispatch = useAppDispatch();
    //const isSearch = useRef(false);
    //const isMounted = useRef(false);

    const {items, status} = useSelector(selectPizzaData);
    const {categoryId, sort, currentPage, searchValue} = useSelector(selectFilter);


    const onChangeCategory = useCallback((idx: number) => {
        dispatch(setCategoryId(idx));
    }, []);

    const onChangePage = (page: number) => {
        dispatch(setCurrentPage(page))
    };

    const getPizzas = async () => {
        const sortBy = sort.sortProperty.replace('-', '');
        const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
        const category = categoryId > 0 ? String(categoryId) : '';
        const search = searchValue;

        dispatch(
            fetchPizzas({
                sortBy,
                order,
                category,
                search,
                currentPage: String(currentPage),
            }),
        );
        window.scrollTo(0, 0);
    };

// –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    useEffect(() => {
        // if (isMounted.current) {
        //   const params = {
        //     categoryId: categoryId > 0 ? categoryId : null,
        //     sortProperty: sort.sortProperty,
        //     currentPage,
        //   };

        //   const queryString = qs.stringify(params, { skipNulls: true });

        //   navigate(`/?${queryString}`);
        // }

        // const params = qs.parse(window.location.search.substring(1)) as unknown as SearchPizzaParams;
        // const sortObj = sortList.find((obj) => obj.sortProperty === params.sortBy);
        // dispatch(
        //   setFilters({
        //     searchValue: params.search,
        //     categoryId: Number(params.category),
        //     currentPage: Number(params.currentPage),
        //     sort: sortObj || sortList[0],
        //   }),
        // );

        getPizzas();
        // isMounted.current = true;
    }, [categoryId, sort.sortProperty, searchValue, currentPage]);

    // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
    // React.useEffect(() => {
    //   if (window.location.search) {
    //     const params = qs.parse(window.location.search.substring(1)) as unknown as SearchPizzaParams;
    //     const sort = sortList.find((obj) => obj.sortProperty === params.sortBy);
    //     dispatch(
    //       setFilters({
    //         searchValue: params.search,
    //         categoryId: Number(params.category),
    //         currentPage: Number(params.currentPage),
    //         sort: sort || sortList[0],
    //       }),
    //     );
    //   }
    //   isMounted.current = true;
    // }, []);

    const pizzas = items.map((obj: any) => <PizzaBlock key={obj.id} {...obj} />);
    const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index}/>);

    return (
        <div className="container">
            <div className="content__top">
                <Categories value={categoryId} onChangeCategory={onChangeCategory}/>
                <Sort value={sort}/>
            </div>
            <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
            {status === 'error' ? (
                <div className="content__error-info">
                    <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
                    <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</p>
                </div>
            ) : (
                <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
            )}

            <Pagination currentPage={currentPage} onChangePage={onChangePage}/>
        </div>
    );
};

export default Home;


//—Å–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ fetch
// fetch(
//     `https://6322e53da624bced308118bc.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`)
//     .then((res) => res.json())
//     .then((arr) => {
//         setItems(arr);
//         setIsLoading(false)
//     });


//–¢–∞–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ–±–æ–ª—å—à–æ–≥–æ, —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —Ç–æ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–∞ –±–∞–∑–µ JS –±–µ–∑ BE
// const pizzas = items.filter(obj => {
//     if (obj.title.toLowerCase().includes(searchValue.toLowerCase())) {
//         return true;
//     }
//     return false
// }).map((obj) => <PizzaBlock key={obj.id} {...obj} />);